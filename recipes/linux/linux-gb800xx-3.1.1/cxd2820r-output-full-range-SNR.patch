cxd2820r: by default SNR output is scaled to full 0-65535 range;
output in dBx10 can be enabled through a module parameter;

Signed-off-by: Gianluca Gennari <gennarone@gmail.com>
---
 drivers/media/dvb/frontends/cxd2820r_core.c |    4 +++
 drivers/media/dvb/frontends/cxd2820r_priv.h |    1 +
 drivers/media/dvb/frontends/cxd2820r_t.c    |   29 +++++++++++++++++++++--
 drivers/media/dvb/frontends/cxd2820r_t2.c   |   33 ++++++++++++++++++++++++--
 4 files changed, 61 insertions(+), 6 deletions(-)

diff --git a/drivers/media/dvb/frontends/cxd2820r_core.c b/drivers/media/dvb/frontends/cxd2820r_core.c
index 8a0230a..d5c518a 100644
--- a/drivers/media/dvb/frontends/cxd2820r_core.c
+++ b/drivers/media/dvb/frontends/cxd2820r_core.c
@@ -25,6 +25,10 @@ int cxd2820r_debug;
 module_param_named(debug, cxd2820r_debug, int, 0644);
 MODULE_PARM_DESC(debug, "Turn on/off frontend debugging (default:off).");
 
+int cxd2820r_snrdb;
+module_param_named(snrdb,cxd2820r_snrdb, int, 0644);
+MODULE_PARM_DESC(snrdb, "Turn on/off SNR output in dBx10 (default:off).");
+
 /* write multiple registers */
 static int cxd2820r_wr_regs_i2c(struct cxd2820r_priv *priv, u8 i2c, u8 reg,
 	u8 *val, int len)
diff --git a/drivers/media/dvb/frontends/cxd2820r_priv.h b/drivers/media/dvb/frontends/cxd2820r_priv.h
index 9553913..d043522 100644
--- a/drivers/media/dvb/frontends/cxd2820r_priv.h
+++ b/drivers/media/dvb/frontends/cxd2820r_priv.h
@@ -66,6 +66,7 @@ struct cxd2820r_priv {
 /* cxd2820r_core.c */
 
 extern int cxd2820r_debug;
+extern int cxd2820r_snrdb;
 
 int cxd2820r_gpio(struct dvb_frontend *fe);
 
diff --git a/drivers/media/dvb/frontends/cxd2820r_t.c b/drivers/media/dvb/frontends/cxd2820r_t.c
index b1450ac..6638bcd 100644
--- a/drivers/media/dvb/frontends/cxd2820r_t.c
+++ b/drivers/media/dvb/frontends/cxd2820r_t.c
@@ -311,7 +311,6 @@ int cxd2820r_read_signal_strength_t(struct dvb_frontend *fe,
 
 	/* scale value to 0x0000-0xffff from 0x0000-0x0fff */
 	*strength = tmp * 0xffff / 0x0fff;
-
 	return ret;
 error:
 	dbg("%s: failed:%d", __func__, ret);
@@ -323,7 +322,7 @@ int cxd2820r_read_snr_t(struct dvb_frontend *fe, u16 *snr)
 	struct cxd2820r_priv *priv = fe->demodulator_priv;
 	int ret;
 	u8 buf[2];
-	u16 tmp;
+	u16 tmp, max_snr;
 	/* report SNR in dB * 10 */
 
 	ret = cxd2820r_rd_regs(priv, 0x00028, buf, sizeof(buf));
@@ -338,8 +337,32 @@ int cxd2820r_read_snr_t(struct dvb_frontend *fe, u16 *snr)
 	else
 		*snr = 0;
 
-	dbg("%s: dBx10=%d val=%04x", __func__, *snr, tmp);
+	if (cxd2820r_snrdb)
+		goto db_out;
+
+	/* scale SNR to full range */
+	ret = cxd2820r_rd_regs(priv, 0x0002f, buf, 1);
+	if (ret)
+		goto error;
 
+	switch ((buf[0] >> 6) & 0x03) {
+	case 0: /* QPSK */
+		max_snr = 230;
+		break;
+	case 1: /* QAM_16 */
+		max_snr = 260;
+		break;
+	case 2: /* QAM_64 */
+	default:
+		max_snr = 290;
+		break;
+	}
+
+	*snr = (*snr >= max_snr) ? 0xffff : (0xffff / max_snr) * *snr;
+	dbg("%s: SNR=%d val=%04x", __func__, *snr, tmp);
+	return ret;
+db_out:
+	dbg("%s: dBx10=%d val=%04x", __func__, *snr, tmp);
 	return ret;
 error:
 	dbg("%s: failed:%d", __func__, ret);
diff --git a/drivers/media/dvb/frontends/cxd2820r_t2.c b/drivers/media/dvb/frontends/cxd2820r_t2.c
index e21fc97..83e5428 100644
--- a/drivers/media/dvb/frontends/cxd2820r_t2.c
+++ b/drivers/media/dvb/frontends/cxd2820r_t2.c
@@ -345,7 +345,6 @@ int cxd2820r_read_signal_strength_t2(struct dvb_frontend *fe,
 
 	/* scale value to 0x0000-0xffff from 0x0000-0x0fff */
 	*strength = tmp * 0xffff / 0x0fff;
-
 	return ret;
 error:
 	dbg("%s: failed:%d", __func__, ret);
@@ -357,7 +356,7 @@ int cxd2820r_read_snr_t2(struct dvb_frontend *fe, u16 *snr)
 	struct cxd2820r_priv *priv = fe->demodulator_priv;
 	int ret;
 	u8 buf[2];
-	u16 tmp;
+	u16 tmp, max_snr;
 	/* report SNR in dB * 10 */
 
 	ret = cxd2820r_rd_regs(priv, 0x02028, buf, sizeof(buf));
@@ -372,8 +371,36 @@ int cxd2820r_read_snr_t2(struct dvb_frontend *fe, u16 *snr)
 	else
 		*snr = 0;
 
-	dbg("%s: dBx10=%d val=%04x", __func__, *snr, tmp);
+	if (cxd2820r_snrdb)
+		goto db_out;
+
+	/* scale SNR to full range */
+	ret = cxd2820r_rd_regs(priv, 0x0205d, buf, 1);
+	if (ret)
+		goto error;
 
+	switch (buf[0] & 0x07) {
+	/* FIXME: check the values */
+	case 0: /* QPSK */
+		max_snr = 170;
+		break;
+	case 1: /* QAM_16 */
+		max_snr = 200;
+		break;
+	case 2: /* QAM_64 */
+		max_snr = 230;
+		break;
+	case 3: /* QAM_256 */
+	default:
+		max_snr = 260;
+		break;
+	}
+
+	*snr = (*snr >= max_snr) ? 0xffff : (0xffff / max_snr) * *snr;
+	dbg("%s: SNR=%d val=%04x", __func__, *snr, tmp);
+	return ret;
+db_out:
+	dbg("%s: dBx10=%d val=%04x", __func__, *snr, tmp);
 	return ret;
 error:
 	dbg("%s: failed:%d", __func__, ret);
-- 
1.7.0.4

